name: Plan

on:
  workflow_run:
    workflows:
      - "Plan (pre)"
    types:
      - completed
  workflow_dispatch:

jobs:
  prepare:
    if: (github.event_name == 'workflow_dispatch' &&
        github.ref_name == github.event.repository.default_branch) ||
        (github.event_name == 'workflow_run' &&
        github.event.workflow_run.conclusion == 'success')
    permissions:
      actions: read
      contents: write
      statuses: write
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      workspaces: ${{ steps.workspaces.outputs.this }}
      sha: ${{ steps.github.outputs.sha }}
      ref: ${{ steps.github.outputs.ref }}
      number: ${{ steps.github.outputs.number }}
      status: ${{ steps.status.outputs.this }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Find repository and sha to checkout
        id: github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ '${{ github.event_name }}' == 'workflow_dispatch' ]]; then
            sha='${{ github.sha }}'
            ref='${{ github.sha }}'
          elif [[ '${{ github.event_name }}' == 'workflow_run' ]]; then
            sha='${{ github.event.workflow_run.head_commit.id }}'
            ref="$(gh api '/repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/jobs' --jq '.jobs[] | .steps[] | .name | select(startswith("Run ref="))')"
            ref="${ref#Run ref=}"
            number="$(gh api '/repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/jobs' --jq '.jobs[] | .steps[] | .name | select(startswith("Run number="))')"
            number="${number#Run number=}"
          fi
          echo "::set-output name=sha::$sha"
          echo "::set-output name=ref::$ref"
          echo "::set-output name=number::$number"
      - run: sha=${{ steps.github.outputs.sha }}
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh api 'repos/${{ github.repository }}/statuses/${{ steps.github.outputs.sha }}' -f context='Plan' -f state='pending' -f target_url='${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
      - name: Checkout head
        uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
          ref: ${{ steps.github.outputs.ref }}
          path: head
      - name: Discover workspaces
        id: workspaces
        run: echo "::set-output name=this::$(ls github | jq --raw-input '[.[0:-4]]' | jq -sc add)"
        working-directory: head
      - name: Checkout base
        uses: actions/checkout@v2
        with:
          path: base
      - name: Build scripts
        run: |
          npm install
          npm run build
        working-directory: base/scripts
      - name: Run actions
        id: status
        run: |
          if [[ "$(git log --oneline -1)" == *\[plan\] ]]; then
            while read workspace; do
              TF_WORKSPACE="$workspace" node ../../base/scripts/lib/actions/*.js
            done <<< "$(jq -r '.[]' <<< '${{ steps.workspaces.outputs.this }}')"
          fi
          echo "::set-output name=this::$(git diff-index --quiet HEAD; echo $?)"
        working-directory: head/scripts
      - name: Prepare git
        if: steps.status.outputs.this == '1'
        uses: ./.github/actions/git-config-user
      - name: Push changes
        if: steps.status.outputs.this == '1'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git add --all
          git commit --message='chore: Update github/*.yml [plan]'
          git push
        working-directory: head
  plan:
    needs: [prepare]
    if: needs.prepare.outputs.workspaces != '' && needs.prepare.outputs.status == '0'
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        workspace: ${{ fromJson(needs.prepare.outputs.workspaces) }}
    name: Plan
    runs-on: ubuntu-latest
    env:
      TF_IN_AUTOMATION: 1
      TF_INPUT: 0
      TF_WORKSPACE: ${{ matrix.workspace }}
      AWS_ACCESS_KEY_ID: ${{ secrets.RO_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.RO_AWS_SECRET_ACCESS_KEY }}
      GITHUB_APP_ID: ${{ secrets.RO_GITHUB_APP_ID }}
      GITHUB_APP_INSTALLATION_ID: ${{ secrets[format('RO_GITHUB_APP_INSTALLATION_ID_{0}', matrix.workspace)] || secrets.RO_GITHUB_APP_INSTALLATION_ID }}
      GITHUB_APP_PEM_FILE: ${{ secrets.RO_GITHUB_APP_PEM_FILE }}
      TF_VAR_write_delay_ms: 300
    defaults:
      run:
        shell: bash
        working-directory: head/terraform
    steps:
      - uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
          ref: ${{ needs.prepare.outputs.ref }}
      - name: Setup terraform
        uses: hashicorp/setup-terraform@3d8debd658c92063839bc97da5c2427100420dec # v1.3.2
        with:
          terraform_version: 1.1.4
      - name: Initialize terraform
        run: terraform init
      - name: Check terraform lock
        if: github.event_name == 'workflow_run'
        run: git diff --exit-code .terraform.lock.hcl
      - name: Format terraform
        run: terraform fmt -check
      - name: Validate terraform
        run: terraform validate -no-color
      - name: Plan terraform
        id: plan
        run: terraform plan -refresh=false -lock=false -out=${{ env.TF_WORKSPACE }}.tfplan -no-color
      - name: Upload terraform plan
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.TF_WORKSPACE }}_${{ needs.prepare.outputs.sha }}.tfplan
          path: terraform/${{ env.TF_WORKSPACE }}.tfplan
          if-no-files-found: error
          retention-days: 90
  comment:
    needs: [prepare, plan]
    if: github.event_name == 'workflow_run' && needs.prepare.outputs.status == '0'
    permissions:
      contents: read
      pull-requests: write
    name: Comment
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.RO_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.RO_AWS_SECRET_ACCESS_KEY }}
    defaults:
      run:
        shell: bash
        working-directory: head/terraform
    steps:
      - uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
          ref: ${{ needs.prepare.outputs.ref }}
      - name: Setup terraform
        uses: hashicorp/setup-terraform@3d8debd658c92063839bc97da5c2427100420dec # v1.3.2
        with:
          terraform_version: 1.1.4
          terraform_wrapper: false
      - name: Initialize terraform
        run: terraform init
      - name: Download terraform plans
        uses: actions/download-artifact@v2
        with:
          path: terraform
      - name: Show terraform plans
        run: |
          for plan in $(find . -type f -name '*.tfplan'); do
            echo "<details><summary>$(basename "$plan" '.tfplan')</summary>" >> TERRAFORM_PLANS.md
            echo '' >> TERRAFORM_PLANS.md
            echo '```' >> TERRAFORM_PLANS.md
            echo "$(terraform show -no-color "$plan" 2>&1)" >> TERRAFORM_PLANS.md
            echo '```' >> TERRAFORM_PLANS.md
            echo '' >> TERRAFORM_PLANS.md
            echo '</details>' >> TERRAFORM_PLANS.md
          done
          cat TERRAFORM_PLANS.md
      - name: Prepare comment
        run: |
          echo 'COMMENT<<EOF' >> $GITHUB_ENV
          if [[ $(wc -c TERRAFORM_PLANS.md | cut -d' ' -f1) -ge 65000 ]]; then
            echo 'Terraform plans are too long to post as a comment. Please inspect [Plan > Comment > Show terraform plans](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) instead.' >> $GITHUB_ENV
          else
            cat TERRAFORM_PLANS.md >> $GITHUB_ENV
          fi
          echo 'EOF' >> $GITHUB_ENV
      - name: Comment on pull request
        uses: marocchino/sticky-pull-request-comment@39c5b5dc7717447d0cba270cd115037d32d28443 # v2.2.0
        with:
          number: ${{ needs.prepare.outputs.number }}
          message: |
            Before merge, verify that all the following plans are correct. They will be applied as-is after the merge.

            #### Terraform plans
            ${{ env.COMMENT }}
